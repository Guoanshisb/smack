#![feature(quote, plugin_registrar, rustc_private)]

extern crate syntax;
extern crate rustc;

use rustc::plugin::Registry;

use syntax::ptr::P;
use syntax::ast::{Item, MetaItem, ItemFn, Ident};
use syntax::ext::base::ExtCtxt;
use syntax::codemap::Span;
use syntax::ext::base::SyntaxExtension::Modifier;
use syntax::parse::token::intern;
use syntax::ext::build::AstBuilder;

use syntax::codemap;

#[plugin_registrar]
pub fn registrar(reg: &mut Registry) {
    reg.register_syntax_extension(intern("extension"), Modifier(Box::new(expand)));
}

fn expand(cx: &mut ExtCtxt, _: Span, _: &MetaItem, item: P<Item>) -> P<Item> {
    if let ItemFn(..) = item.node {
        quote_item!(cx,
            fn foo() -> u32 {
                let sum = 2 + 2;
                println!("{}", sum);
                sum
            }
        ).unwrap()
    } else {
        item.clone()
    }
}

// fn expand(cx: &mut ExtCtxt, _: Span, _: &MetaItem, item: P<Item>) -> P<Item> {
//     if let ItemFn(..) = item.node {
//         let expr = quote_expr!(cx,
//             {
//                 let sum = 2 + 2;
//                 println!("Hello World");
//                 println!("{}", sum);
//                 sum
//             });
//         let new_block = cx.block_expr(expr);
//         let inputs = vec![];
//         let u32_ident = Ident::new(intern("u32"));
//         let ret_type = cx.ty_path(cx.path_ident(codemap::DUMMY_SP, u32_ident));
//         cx.item_fn(codemap::DUMMY_SP, item.ident, inputs, ret_type, new_block)
//     } else {
//         item.clone()
//     }
// }
